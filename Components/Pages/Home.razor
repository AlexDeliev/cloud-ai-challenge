@page "/"
@using Azure
@using Azure.AI.Vision
@using Azure.AI.OpenAI
@using System
@using System.Threading.Tasks

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Computer Vision</h1>

<p>Insert URL or type prompt:</p>

<textarea @bind="urlOrPrompt" rows="1" cols="50" placeholder="Enter URL to analyze or prompt text to generate image."></textarea>
<button @onclick="AnalyzeImage">Analyze Image</button>
<button @onclick="GenerateImage">Generate Image</button>
<img src="@imageUrl" alt="Image to analyze" width="300" height="300" />

<p>@captionFromAnalysis</p>

@code {
    string urlOrPrompt = "";
    Uri imageUrl = new Uri("https://placehold.it/300x300");
    string captionFromAnalysis = "";

    async Task AnalyzeImage()
    {
        string visionEndpoint = Environment.GetEnvironmentVariable("VISION_ENDPOINT");
        string visionKey = Environment.GetEnvironmentVariable("VISION_KEY");

        if (string.IsNullOrEmpty(visionEndpoint) || string.IsNullOrEmpty(visionKey))
        {
            captionFromAnalysis = "Environment variables for Vision API are not set.";
            return;
        }

        var serviceOptions = new VisionServiceOptions(
            visionEndpoint,
            new AzureKeyCredential(visionKey));

        try
        {
            var imageSource = VisionSource.FromUrl(new Uri(urlOrPrompt));
            imageUrl = new Uri(urlOrPrompt);

            var analysisOptions = new ImageAnalysisOptions
            {
                Features = ImageAnalysisFeature.Caption | ImageAnalysisFeature.CropSuggestions
            };

            using var analyzer = new ImageAnalyzer(serviceOptions, imageSource, analysisOptions);
            var result = await analyzer.AnalyzeAsync();

            if (result.Reason == ImageAnalysisResultReason.Analyzed)
            {
                if (result.Caption != null)
                {
                    captionFromAnalysis = result.Caption.Content;
                }
            }
            else
            {
                captionFromAnalysis = "Image analysis failed. Check logs for details.";
                Console.WriteLine(ImageAnalysisErrorDetails.FromResult(result));
            }
        }
        catch (Exception ex)
        {
            captionFromAnalysis = $"Error: {ex.Message}";
        }
    }

    async Task GenerateImage()
    {
        string endpoint = Environment.GetEnvironmentVariable("OPENAI_ENDPOINT");
        string key = Environment.GetEnvironmentVariable("OPENAI_KEY");

        if (string.IsNullOrEmpty(endpoint) || string.IsNullOrEmpty(key))
        {
            captionFromAnalysis = "Environment variables for OpenAI API are not set.";
            return;
        }

        try
        {
            var client = new OpenAIClient(new Uri(endpoint), new AzureKeyCredential(key));

            var options = new ImageGenerationOptions
            {
                Prompt = urlOrPrompt,
                Size = ImageSize.Size256x256
            };

            var response = await client.GetImageGenerationsAsync(options);
            imageUrl = response.Value.Data[0].Url;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            captionFromAnalysis = $"Error: {ex.Message}";
        }
    }
}
